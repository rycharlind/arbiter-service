{
  "name": "pug-walk",
  "version": "0.0.3",
  "description": "Walk and transform a pug AST",
  "keywords": [
    "pug"
  ],
  "dependencies": {},
  "devDependencies": {
    "pug-lexer": "^1.0.0",
    "pug-parser": "^1.0.0"
  },
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pugjs/pug-walk.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# pug-walk\n\nWalk and transform a pug AST\n\n[![Build Status](https://img.shields.io/travis/pugjs/pug-walk/master.svg)](https://travis-ci.org/pugjs/pug-walk)\n[![Dependency Status](https://img.shields.io/gemnasium/pugjs/pug-walk.svg)](https://gemnasium.com/pugjs/pug-walk)\n[![NPM version](https://img.shields.io/npm/v/pug-walk.svg)](https://www.npmjs.org/package/pug-walk)\n\n## Installation\n\n    npm install pug-walk\n\n## Usage\n\n\n```js\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\nvar walk = require('pug-walk');\n\nvar ast = walk(parse(lex('.my-class foo')), function before(node, replace) {\n  // called before walking the children of `node`\n  // to replace the node, call `replace(newNode)`\n  // return `false` to skip descending\n  if (node.type === 'Text') {\n    replace({ type: 'Text', val: 'bar', line: node.line });\n  }\n}, function after(node, replace) {\n  // called after walking the children of `node`\n  // to replace the node, call `replace(newNode)`\n}, {includeDependencies: true});\nassert.deepEqual(parse(lex('.my-class bar')), ast);\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pugjs/pug-walk/issues"
  },
  "_id": "pug-walk@0.0.3",
  "dist": {
    "shasum": "d131cd86b556fab3c75f120625c37f9579e4bfaf"
  },
  "_from": "pug-walk@^0.0.3",
  "_resolved": "https://registry.npmjs.org/pug-walk/-/pug-walk-0.0.3.tgz"
}
